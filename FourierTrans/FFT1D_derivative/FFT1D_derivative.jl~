using FFTW

struct FFT1D_config

    nx::Int64			# # of grid points
    xl::Float64			# leftmost(lowest) value of x
    xr::Float64			# rightmost(highest) value of x
    x_X::Vector{Float64}	# x coordinates
    k_X::Vector{Float64}	# k corrdinates

end

function init_FFT1D(nx, xl, xr)::FFT1D_config

    if nx % 2 != 0
        println("CONFIG ERROR")
    end

    # *** initialize x-coordinate ***
    len_x = xr - xl
    x_X = [xl + len_x*n/nx for n = 0:nx-1]

    # *** initialize k-coordinate ***
    # TODO: implement for the case of nx % 2 != 0
    hx = 2pi/len_x
    k_X = [hx*n for n = 0:div(nx,2)-1]
    append!(k_X,
	  [hx*(n - div(nx,2)) for n = 0:div(nx,2)-1])
    return FFT1D_config(nx, xl, xr, x_X, k_X)

end

function k_x(x_func)
    return fft(complex(x_func))
end

function x_k(k_func)
    return real(ifft(k_func))
end

function k_DX_k(k_func, config::FFT1D_config)
    return (im * config.k_X) .* k_func
end

function x_DX_x(x_func, config::FFT1D_config)
    return x_k(k_DX_k(k_x(x_func), config))
end

function test_1D_FFT_derivative()

    # *** Parameter setting ***
    nx = 20
    xl = 0.0
    xr = 2pi
    c = init_FFT1D(nx, xl, xr)
    x_X = c.x_X

    # *** differentiate by spectral method ***
    x_func = exp.(sin.(x_X))
    x_dfunc = x_DX_x(x_func, c)

    # *** exact derivative ***
    x_exact = cos.(x_X) .* x_func

    open("testcase.txt", "w") do f
        for i = 1:nx
            println(f, x_X[i], " ", x_dfunc[i], " ", x_exact[i])
        end
    end

end