function detect_first(lst::Array{Int64,1}, val::Int64)
  for i = 1:length(lst)
    if lst[i] == val
      return i
    end
  end
  throw("[detect_first] 'lst' should include 'val'.")
end

function split(lsts::Array{Array{Int64,1},1})
  local new_lsts::Array{Array{Int64,1},1} = []
  for lst in lsts
    for elem in Set(lst)
      i = detect_first(lst, elem)
      new_lst = lst[1:i-1]
      append!(new_lst, [elem+1, elem+1])
      append!(new_lst, lst[i+1:length(lst)])
      if !(new_lst in new_lsts)
        push!(new_lsts, new_lst)
      end
    end
  end
  return new_lsts
end

function is_one_three_power(lst::Array{Int64,1})
  local sumval::Rational{Int64} = 0
  local N::Int64 = length(lst)
  for i = 1:N
    sumval += (N - i + 1)//(3^lst[i])
    if sumval > 1
      return false
    end
  end
  return sumval == 1
end



#---------------------------------------------------------

# an_lsts = [[0]]
# println("an_lsts=", an_lsts)
# println("TYPE:", typeof(an_lsts) )

# for i = 1:5
#   global an_lsts = split(an_lsts)
#   print("an_lsts=", an_lsts, "\n")
# end

println(is_one_three_power([1,3]))