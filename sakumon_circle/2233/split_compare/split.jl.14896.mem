        - using BenchmarkTools
        - 
        - function split!(lsts::Set{Array{Int64,1}}; type::Int64=1)
        0   if type == 3
        0     split_fast!(lsts)
        -   else
     2112     new_lsts = [split_lst(lst, elem, type = type)
        - 	        for lst in lsts
        - 	        for elem in Set(lst)]
        0     empty!(lsts)
   108328     union!(lsts, Set(new_lsts))
        -   end
        - end
        - 
        - function split_fast!(lsts::Set{Array{Int64,1}})
        0   N_lst = length( pop!(copy(lsts)) )
        0   new_lst = Array{Int64,1}(undef, N_lst+1)
        0   new_lsts = Array{Int64,1}[]
        - 
        0   for lst in lsts
        0     for elem in Set(lst)
        0       x = findfirst(isequal(elem), lst)
        0       if x != 1
        0         new_lst[1:x-1] = lst[1:x-1]
        -       end
        0       new_lst[x:x+1] = Int64[elem+1, elem+1]
        0       if x != N_lst
        0       	new_lst[x+2:N_lst+1] = lst[x+1:N_lst]
        -       end
        0       push!(new_lsts, new_lst[:])
        -     end
        -   end
        - 
        0   empty!(lsts)
        0   union!(lsts, Set(new_lsts))
        - end
        - 
        - 
        - 
        - function split_lst(lst::Array{Int64,1}, val::Int64;
        - 	 	type::Int64=1)::Array{Int64,1}
        - 
   795360   if !(val in lst)
        0     throw(ErrorException("'lst' must include 'val'. [split_lst]"))
        -   end
        - 
        0   if type == 1
        0     return split_lst_1(lst, val)
        0   elseif type == 2
        0     return split_lst_2(lst, val)
        -   else
        0     throw(ErrorException("'type' is invalid [split_lst]"))
        -   end
        - 
        - end
        - 
        - function split_lst_1(lst::Array{Int64,1},
        - 		val::Int64)::Array{Int64,1}
        0   x = findfirst(isequal(val), lst)
        0   if x == 1
   213920     lst_dummy = copy(lst)
        0     popfirst!(lst_dummy)
   111264     new_lst = Int64[val+1, val+1]
   139728     append!(new_lst, lst_dummy)
        0     return new_lst
        0   elseif x == length(lst)
   137072     lst_dummy = copy(lst)
        0     pop!(lst_dummy)
   234256     append!(lst_dummy, Int64[val+1, val+1])
        0     return lst_dummy
        -   else
   685312     new_lst = lst[1:x-1]
  1094688     append!(new_lst, Int64[val+1, val+1])
  1057264     append!(new_lst, lst[x+1:length(lst)])
        0     return new_lst
        -   end
        - end
        - 
        - function split_lst_2(lst::Array{Int64, 1},
        - 	 	val::Int64)::Array{Int64,1}
        0   N_lst = length(lst)
        0   new_lst = Array{Int64, 1}(undef, N_lst+1)
        0   x = findfirst(isequal(val), lst)
        - 
        0   if x != 1
        0     new_lst[1:x-1] = lst[1:x-1]
        -   end
        0   new_lst[x:x+1] = Int64[val+1, val+1]
        0   if x != N_lst
        0     new_lst[x+2:N_lst+1] =lst[x+1:N_lst]
        -   end
        - 
        0   return new_lst
        - 
        - end
        - 
        - function test(type::Int64)
 57352272   an = Set([[0]])
        0   for i = 1:14
        0     split!(an, type=type)
        -   end
        - end
        - 
        - 
        - function main()
        - 
        -   @benchmark test(1)
        -   @benchmark test(2)
        -   @benchmark test(3)
        - 
        - end
        - 
        - using Profile
        - Profile.clear_malloc_data()
        - test(1)
